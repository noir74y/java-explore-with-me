{
	"info": {
		"_postman_id": "fb0c15ef-368a-4c81-99e0-8f313e4b0580",
		"name": "feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28544910"
	},
	"item": [
		{
			"name": "List Friends of User1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {        \r",
							"        const user1 = await api.addUser(rnd.getUser());\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        const user3 = await api.addUser(rnd.getUser());\r",
							"        const user4 = await api.addUser(rnd.getUser());\r",
							"        const user5 = await api.addUser(rnd.getUser());\r",
							"        const user6 = await api.addUser(rnd.getUser());\r",
							"\r",
							"        const category1 = await api.addCategory(rnd.getCategory());\r",
							"        const category2 = await api.addCategory(rnd.getCategory());\r",
							"        const category3 = await api.addCategory(rnd.getCategory());\r",
							"\r",
							"        let eventBody1 = rnd.getEvent(category1.id);\r",
							"        let eventBody2 = rnd.getEvent(category2.id);\r",
							"        let eventBody3 = rnd.getEvent(category3.id);\r",
							"\r",
							"        eventBody1['requestModeration'] = false\r",
							"        eventBody2['requestModeration'] = false\r",
							"        eventBody3['requestModeration'] = false\r",
							"\r",
							"        const event1 = await api.addEvent(user2.id, eventBody1);\r",
							"        const event2 = await api.addEvent(user3.id, eventBody2);\r",
							"        const event3 = await api.addEvent(user4.id, eventBody3);\r",
							"\r",
							"        const eventCreateResult1 = await api.publishEvent(event1.id);\r",
							"        const eventCreateResult2 = await api.publishEvent(event2.id);\r",
							"        const eventCreateResult3 = await api.publishEvent(event3.id);\r",
							"\r",
							"        const eventPublishResult1 = await api.publishParticipationRequest(event1.id, user5.id);\r",
							"        const eventPublishResult2 = await api.publishParticipationRequest(event2.id, user6.id);\r",
							"\r",
							"        await api.createFriendshipAndSubscription(user1.id, user2.id); \r",
							"        await api.createFriendshipAndSubscription(user1.id, user3.id); \r",
							"        await api.createFriendshipAndSubscription(user1.id, user5.id); \r",
							"        await api.createFriendshipAndSubscription(user1.id, user6.id); \r",
							"\r",
							"        pm.collectionVariables.set(\"uid1\", user1.id)\r",
							"        \r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Test search item response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, 'List length must be 4').to.eql(4);\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							" for (let i = 0; i < target.length; i++) {\r",
							"    pm.test(\"Проверка наличия полей в объекте: \" + i, function () {\r",
							"        pm.expect(target[i]).to.have.property('id');\r",
							"        pm.expect(target[i]).to.have.property('id');\r",
							"        pm.expect(target[i].friend1).to.have.property('id');\r",
							"        pm.expect(target[i].friend1).to.have.property('name');\r",
							"        pm.expect(target[i].friend1).to.have.property('email');\r",
							"        pm.expect(target[i].friend2).to.have.property('id');\r",
							"        pm.expect(target[i].friend2).to.have.property('name');\r",
							"        pm.expect(target[i].friend2).to.have.property('email');        \r",
							"    });\r",
							" }"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/friendship",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"friendship"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{uid1}}",
							"description": "(Required) id текущего пользователя"
						}
					]
				},
				"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
			},
			"response": []
		},
		{
			"name": "List subsriptions of User1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {        \r",
							"        const user1 = await api.addUser(rnd.getUser());\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        const user3 = await api.addUser(rnd.getUser());\r",
							"        const user4 = await api.addUser(rnd.getUser());\r",
							"        const user5 = await api.addUser(rnd.getUser());\r",
							"        const user6 = await api.addUser(rnd.getUser());\r",
							"\r",
							"        const category1 = await api.addCategory(rnd.getCategory());\r",
							"        const category2 = await api.addCategory(rnd.getCategory());\r",
							"        const category3 = await api.addCategory(rnd.getCategory());\r",
							"\r",
							"        let eventBody1 = rnd.getEvent(category1.id);\r",
							"        let eventBody2 = rnd.getEvent(category2.id);\r",
							"        let eventBody3 = rnd.getEvent(category3.id);\r",
							"\r",
							"        eventBody1['requestModeration'] = false\r",
							"        eventBody2['requestModeration'] = false\r",
							"        eventBody3['requestModeration'] = false\r",
							"\r",
							"        const event1 = await api.addEvent(user2.id, eventBody1);\r",
							"        const event2 = await api.addEvent(user3.id, eventBody2);\r",
							"        const event3 = await api.addEvent(user4.id, eventBody3);\r",
							"\r",
							"        const eventCreateResult1 = await api.publishEvent(event1.id);\r",
							"        const eventCreateResult2 = await api.publishEvent(event2.id);\r",
							"        const eventCreateResult3 = await api.publishEvent(event3.id);\r",
							"\r",
							"        const eventPublishResult1 = await api.publishParticipationRequest(event1.id, user5.id);\r",
							"        const eventPublishResult2 = await api.publishParticipationRequest(event2.id, user6.id);\r",
							"\r",
							"        await api.createFriendshipAndSubscription(user1.id, user2.id); \r",
							"        await api.createFriendshipAndSubscription(user1.id, user3.id); \r",
							"        await api.createFriendshipAndSubscription(user1.id, user5.id); \r",
							"        await api.createFriendshipAndSubscription(user1.id, user6.id); \r",
							"\r",
							"        pm.collectionVariables.set(\"uid1\", user1.id)\r",
							"\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Test search item response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, 'List length must be 4').to.eql(4);\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							" for (let i = 0; i < target.length; i++) {\r",
							"    pm.test(\"Проверка наличия полей в объекте: \" + i, function () {\r",
							"        pm.expect(target[i]).to.have.property('id');\r",
							"        pm.expect(target[i]).to.have.property('id');\r",
							"        pm.expect(target[i].subscriber).to.have.property('id');\r",
							"        pm.expect(target[i].subscriber).to.have.property('name');\r",
							"        pm.expect(target[i].subscriber).to.have.property('email');\r",
							"        pm.expect(target[i].person).to.have.property('id');\r",
							"        pm.expect(target[i].person).to.have.property('name');\r",
							"        pm.expect(target[i].person).to.have.property('email');    \r",
							"    });\r",
							" }"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:subscriberId/subscription/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":subscriberId",
						"subscription",
						"events"
					],
					"variable": [
						{
							"key": "subscriberId",
							"value": "{{uid1}}"
						}
					]
				},
				"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
			},
			"response": []
		},
		{
			"name": "List events of friends (as initiators) of User1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {        \r",
							"        const user1 = await api.addUser(rnd.getUser());\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        const user3 = await api.addUser(rnd.getUser());\r",
							"        const user4 = await api.addUser(rnd.getUser());\r",
							"        const user5 = await api.addUser(rnd.getUser());\r",
							"        const user6 = await api.addUser(rnd.getUser());\r",
							"\r",
							"        const category1 = await api.addCategory(rnd.getCategory());\r",
							"        const category2 = await api.addCategory(rnd.getCategory());\r",
							"        const category3 = await api.addCategory(rnd.getCategory());\r",
							"\r",
							"        let eventBody1 = rnd.getEvent(category1.id);\r",
							"        let eventBody2 = rnd.getEvent(category2.id);\r",
							"        let eventBody3 = rnd.getEvent(category3.id);\r",
							"\r",
							"        eventBody1['requestModeration'] = false\r",
							"        eventBody2['requestModeration'] = false\r",
							"        eventBody3['requestModeration'] = false\r",
							"\r",
							"        const event1 = await api.addEvent(user2.id, eventBody1);\r",
							"        const event2 = await api.addEvent(user3.id, eventBody2);\r",
							"        const event3 = await api.addEvent(user4.id, eventBody3);\r",
							"\r",
							"        const eventCreateResult1 = await api.publishEvent(event1.id);\r",
							"        const eventCreateResult2 = await api.publishEvent(event2.id);\r",
							"        const eventCreateResult3 = await api.publishEvent(event3.id);\r",
							"\r",
							"        const eventPublishResult1 = await api.publishParticipationRequest(event1.id, user5.id);\r",
							"        const eventPublishResult2 = await api.publishParticipationRequest(event2.id, user6.id);\r",
							"\r",
							"        await api.createFriendshipAndSubscription(user1.id, user2.id); \r",
							"        await api.createFriendshipAndSubscription(user1.id, user3.id); \r",
							"        await api.createFriendshipAndSubscription(user1.id, user5.id); \r",
							"        await api.createFriendshipAndSubscription(user1.id, user6.id); \r",
							"\r",
							"        pm.collectionVariables.set(\"uid1\", user1.id)\r",
							"\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;    \r",
							"});\r",
							"\r",
							"pm.test(\"Test search item response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
							"});\r",
							"\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							" for (let i = 0; i < target.length; i++) {\r",
							"    pm.test(\"Проверка наличия полей в объекте: \" + i, function () {\r",
							"        pm.expect(target[i]).to.have.property('id');\r",
							"        pm.expect(target[i]).to.have.property('title');\r",
							"        pm.expect(target[i]).to.have.property('annotation');\r",
							"        pm.expect(target[i]).to.have.property('category');\r",
							"        pm.expect(target[i]).to.have.property('paid');\r",
							"        pm.expect(target[i]).to.have.property('eventDate');\r",
							"        pm.expect(target[i]).to.have.property('initiator');\r",
							"        pm.expect(target[i]).to.have.property('views');\r",
							"        pm.expect(target[i]).to.have.property('confirmedRequests');  \r",
							"    });\r",
							" }"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:subscriberId/subscription/events/initiator",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":subscriberId",
						"subscription",
						"events",
						"initiator"
					],
					"variable": [
						{
							"key": "subscriberId",
							"value": "{{uid1}}"
						}
					]
				},
				"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
			},
			"response": []
		},
		{
			"name": "List events of friend User3 (as initiator) of User1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {        \r",
							"        const user1 = await api.addUser(rnd.getUser());\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        const user3 = await api.addUser(rnd.getUser());\r",
							"        const user4 = await api.addUser(rnd.getUser());\r",
							"        const user5 = await api.addUser(rnd.getUser());\r",
							"        const user6 = await api.addUser(rnd.getUser());\r",
							"\r",
							"        const category1 = await api.addCategory(rnd.getCategory());\r",
							"        const category2 = await api.addCategory(rnd.getCategory());\r",
							"        const category3 = await api.addCategory(rnd.getCategory());\r",
							"\r",
							"        let eventBody1 = rnd.getEvent(category1.id);\r",
							"        let eventBody2 = rnd.getEvent(category2.id);\r",
							"        let eventBody3 = rnd.getEvent(category3.id);\r",
							"\r",
							"        eventBody1['requestModeration'] = false\r",
							"        eventBody2['requestModeration'] = false\r",
							"        eventBody3['requestModeration'] = false\r",
							"\r",
							"        const event1 = await api.addEvent(user2.id, eventBody1);\r",
							"        const event2 = await api.addEvent(user3.id, eventBody2);\r",
							"        const event3 = await api.addEvent(user4.id, eventBody3);\r",
							"\r",
							"        const eventCreateResult1 = await api.publishEvent(event1.id);\r",
							"        const eventCreateResult2 = await api.publishEvent(event2.id);\r",
							"        const eventCreateResult3 = await api.publishEvent(event3.id);\r",
							"\r",
							"        const eventPublishResult1 = await api.publishParticipationRequest(event1.id, user5.id);\r",
							"        const eventPublishResult2 = await api.publishParticipationRequest(event2.id, user6.id);\r",
							"\r",
							"        await api.createFriendshipAndSubscription(user1.id, user2.id); \r",
							"        await api.createFriendshipAndSubscription(user1.id, user3.id); \r",
							"        await api.createFriendshipAndSubscription(user1.id, user5.id); \r",
							"        await api.createFriendshipAndSubscription(user1.id, user6.id); \r",
							"\r",
							"        pm.collectionVariables.set(\"uid1\", user1.id)\r",
							"        pm.collectionVariables.set(\"uid3\", user3.id)\r",
							"\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;    \r",
							"});\r",
							"\r",
							"pm.test(\"Test search item response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							" for (let i = 0; i < target.length; i++) {\r",
							"    pm.test(\"Проверка наличия полей в объекте: \" + i, function () {\r",
							"        pm.expect(target[i]).to.have.property('id');\r",
							"        pm.expect(target[i]).to.have.property('title');\r",
							"        pm.expect(target[i]).to.have.property('annotation');\r",
							"        pm.expect(target[i]).to.have.property('category');\r",
							"        pm.expect(target[i]).to.have.property('paid');\r",
							"        pm.expect(target[i]).to.have.property('eventDate');\r",
							"        pm.expect(target[i]).to.have.property('initiator');\r",
							"        pm.expect(target[i]).to.have.property('views');\r",
							"        pm.expect(target[i]).to.have.property('confirmedRequests');  \r",
							"    });\r",
							" }\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:subscriberId/subscription/events/initiator/:personId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":subscriberId",
						"subscription",
						"events",
						"initiator",
						":personId"
					],
					"variable": [
						{
							"key": "subscriberId",
							"value": "{{uid1}}"
						},
						{
							"key": "personId",
							"value": "{{uid3}}"
						}
					]
				},
				"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
			},
			"response": []
		},
		{
			"name": "List events of friends (as participants) of User1",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {        \r",
							"        const user1 = await api.addUser(rnd.getUser());\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        const user3 = await api.addUser(rnd.getUser());\r",
							"        const user4 = await api.addUser(rnd.getUser());\r",
							"        const user5 = await api.addUser(rnd.getUser());\r",
							"        const user6 = await api.addUser(rnd.getUser());\r",
							"\r",
							"        const category1 = await api.addCategory(rnd.getCategory());\r",
							"        const category2 = await api.addCategory(rnd.getCategory());\r",
							"        const category3 = await api.addCategory(rnd.getCategory());\r",
							"\r",
							"        let eventBody1 = rnd.getEvent(category1.id);\r",
							"        let eventBody2 = rnd.getEvent(category2.id);\r",
							"        let eventBody3 = rnd.getEvent(category3.id);\r",
							"\r",
							"        eventBody1['requestModeration'] = false\r",
							"        eventBody2['requestModeration'] = false\r",
							"        eventBody3['requestModeration'] = false\r",
							"\r",
							"        const event1 = await api.addEvent(user2.id, eventBody1);\r",
							"        const event2 = await api.addEvent(user3.id, eventBody2);\r",
							"        const event3 = await api.addEvent(user4.id, eventBody3);\r",
							"\r",
							"        const eventCreateResult1 = await api.publishEvent(event1.id);\r",
							"        const eventCreateResult2 = await api.publishEvent(event2.id);\r",
							"        const eventCreateResult3 = await api.publishEvent(event3.id);\r",
							"\r",
							"        const eventPublishResult1 = await api.publishParticipationRequest(event1.id, user5.id);\r",
							"        const eventPublishResult2 = await api.publishParticipationRequest(event2.id, user6.id);\r",
							"\r",
							"        await api.createFriendshipAndSubscription(user1.id, user2.id); \r",
							"        await api.createFriendshipAndSubscription(user1.id, user3.id); \r",
							"        await api.createFriendshipAndSubscription(user1.id, user5.id); \r",
							"        await api.createFriendshipAndSubscription(user1.id, user6.id); \r",
							"\r",
							"        pm.collectionVariables.set(\"uid1\", user1.id)\r",
							"\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;    \r",
							"});\r",
							"\r",
							"pm.test(\"Test search item response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							" for (let i = 0; i < target.length; i++) {\r",
							"    pm.test(\"Проверка наличия полей в объекте: \" + i, function () {\r",
							"        pm.expect(target[i]).to.have.property('id');\r",
							"        pm.expect(target[i]).to.have.property('title');\r",
							"        pm.expect(target[i]).to.have.property('annotation');\r",
							"        pm.expect(target[i]).to.have.property('category');\r",
							"        pm.expect(target[i]).to.have.property('paid');\r",
							"        pm.expect(target[i]).to.have.property('eventDate');\r",
							"        pm.expect(target[i]).to.have.property('initiator');\r",
							"        pm.expect(target[i]).to.have.property('views');\r",
							"        pm.expect(target[i]).to.have.property('confirmedRequests');  \r",
							"    });\r",
							" }\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:subscriberId/subscription/events/participant",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":subscriberId",
						"subscription",
						"events",
						"participant"
					],
					"variable": [
						{
							"key": "subscriberId",
							"value": "{{uid1}}"
						}
					]
				},
				"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
			},
			"response": []
		},
		{
			"name": "List events of friend User6 (as participant) of User1 Copy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const main = async () => {\r",
							"    const api = new API(pm);\r",
							"    const rnd = new RandomUtils();\r",
							"\r",
							"    try {        \r",
							"        const user1 = await api.addUser(rnd.getUser());\r",
							"        const user2 = await api.addUser(rnd.getUser());\r",
							"        const user3 = await api.addUser(rnd.getUser());\r",
							"        const user4 = await api.addUser(rnd.getUser());\r",
							"        const user5 = await api.addUser(rnd.getUser());\r",
							"        const user6 = await api.addUser(rnd.getUser());\r",
							"\r",
							"        const category1 = await api.addCategory(rnd.getCategory());\r",
							"        const category2 = await api.addCategory(rnd.getCategory());\r",
							"        const category3 = await api.addCategory(rnd.getCategory());\r",
							"\r",
							"        let eventBody1 = rnd.getEvent(category1.id);\r",
							"        let eventBody2 = rnd.getEvent(category2.id);\r",
							"        let eventBody3 = rnd.getEvent(category3.id);\r",
							"\r",
							"        eventBody1['requestModeration'] = false\r",
							"        eventBody2['requestModeration'] = false\r",
							"        eventBody3['requestModeration'] = false\r",
							"\r",
							"        const event1 = await api.addEvent(user2.id, eventBody1);\r",
							"        const event2 = await api.addEvent(user3.id, eventBody2);\r",
							"        const event3 = await api.addEvent(user4.id, eventBody3);\r",
							"\r",
							"        const eventCreateResult1 = await api.publishEvent(event1.id);\r",
							"        const eventCreateResult2 = await api.publishEvent(event2.id);\r",
							"        const eventCreateResult3 = await api.publishEvent(event3.id);\r",
							"\r",
							"        const eventPublishResult1 = await api.publishParticipationRequest(event1.id, user5.id);\r",
							"        const eventPublishResult2 = await api.publishParticipationRequest(event2.id, user6.id);\r",
							"\r",
							"        await api.createFriendshipAndSubscription(user1.id, user2.id); \r",
							"        await api.createFriendshipAndSubscription(user1.id, user3.id); \r",
							"        await api.createFriendshipAndSubscription(user1.id, user5.id); \r",
							"        await api.createFriendshipAndSubscription(user1.id, user6.id); \r",
							"\r",
							"        pm.collectionVariables.set(\"uid1\", user1.id)\r",
							"        pm.collectionVariables.set(\"uid6\", user6.id)        \r",
							"\r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"};\r",
							"\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            // выполняем наш скрипт\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(200);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;    \r",
							"});\r",
							"\r",
							"pm.test(\"Test search item response\", function () {\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							" for (let i = 0; i < target.length; i++) {\r",
							"    pm.test(\"Проверка наличия полей в объекте: \" + i, function () {\r",
							"        pm.expect(target[i]).to.have.property('id');\r",
							"        pm.expect(target[i]).to.have.property('title');\r",
							"        pm.expect(target[i]).to.have.property('annotation');\r",
							"        pm.expect(target[i]).to.have.property('category');\r",
							"        pm.expect(target[i]).to.have.property('paid');\r",
							"        pm.expect(target[i]).to.have.property('eventDate');\r",
							"        pm.expect(target[i]).to.have.property('initiator');\r",
							"        pm.expect(target[i]).to.have.property('views');\r",
							"        pm.expect(target[i]).to.have.property('confirmedRequests');  \r",
							"    });\r",
							" }\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{request_body}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:subscriberId/subscription/events/participant/:personId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":subscriberId",
						"subscription",
						"events",
						"participant",
						":personId"
					],
					"variable": [
						{
							"key": "subscriberId",
							"value": "{{uid1}}"
						},
						{
							"key": "personId",
							"value": "{{uid6}}"
						}
					]
				},
				"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async createFriendshipAndSubscription(userId, friendId, verbose=null) {",
					"        this.post (\"/feature/\" + userId   + \"/\" + friendId, null, \"Ошибка при cоздании дружбы: \", verbose);",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"    async findEvent(eventId, verbose=null) {",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"",
					"                    resolve(response.json());",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "usersCount",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "request_body",
			"value": ""
		},
		{
			"key": "mail",
			"value": ""
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "uid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catname",
			"value": ""
		},
		{
			"key": "eid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "compid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "toCheck",
			"value": ""
		},
		{
			"key": "newDataToSet",
			"value": ""
		},
		{
			"key": "uid1",
			"value": ""
		},
		{
			"key": "reqid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catId",
			"value": ""
		},
		{
			"key": "confirmedRequests",
			"value": ""
		},
		{
			"key": "responseArr",
			"value": ""
		},
		{
			"key": "source1",
			"value": ""
		},
		{
			"key": "source2",
			"value": ""
		},
		{
			"key": "fromId",
			"value": "0"
		},
		{
			"key": "source",
			"value": ""
		},
		{
			"key": "uid3",
			"value": ""
		},
		{
			"key": "uid6",
			"value": ""
		}
	]
}